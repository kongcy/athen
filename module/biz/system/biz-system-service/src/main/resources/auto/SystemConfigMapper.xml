<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.athen.system.repository.SystemConfigMapper">
    <resultMap id="BaseResultMap" type="com.athen.system.api.model.SystemConfig">
        <id column="ID" jdbcType="BIGINT" property="id" />
        <result column="CON_KEY" jdbcType="VARCHAR" property="conKey" />
        <result column="CON_VALUE" jdbcType="VARCHAR" property="conValue" />
        <result column="CON_COMMENT" jdbcType="VARCHAR" property="conComment" />
    </resultMap>
    <resultMap id="BaseResultMap_Alias" type="com.athen.system.api.model.SystemConfig">
        <id column="SYSTEM_CONFIG_ID" jdbcType="BIGINT" property="id" />
        <result column="SYSTEM_CONFIG_CON_KEY" jdbcType="VARCHAR" property="conKey" />
        <result column="SYSTEM_CONFIG_CON_VALUE" jdbcType="VARCHAR" property="conValue" />
        <result column="SYSTEM_CONFIG_CON_COMMENT" jdbcType="VARCHAR" property="conComment" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        `ID`, `CON_KEY`, `CON_VALUE`, `CON_COMMENT`
    </sql>
    <sql id="Base_Column_List_Alias">
        `system_config`.`ID` as `SYSTEM_CONFIG_ID`, `system_config`.`CON_KEY` as `SYSTEM_CONFIG_CON_KEY`, 
        `system_config`.`CON_VALUE` as `SYSTEM_CONFIG_CON_VALUE`, `system_config`.`CON_COMMENT` as `SYSTEM_CONFIG_CON_COMMENT`
    </sql>
    <select id="selectByExample" parameterType="com.athen.system.api.model.SystemConfigExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List" />
        from `system_config`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List" />
        from `system_config`
        where `ID` = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from `system_config`
        where `ID` = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.athen.system.api.model.SystemConfigExample">
        delete from `system_config`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insertSelective" keyColumn="ID" keyProperty="id" parameterType="com.athen.system.api.model.SystemConfig" useGeneratedKeys="true">
        insert into `system_config`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="@Ognl@isNotEmpty(id)">
                `ID`,
            </if>
            <if test="@Ognl@isNotEmpty(conKey)">
                `CON_KEY`,
            </if>
            <if test="@Ognl@isNotEmpty(conValue)">
                `CON_VALUE`,
            </if>
            <if test="@Ognl@isNotEmpty(conComment)">
                `CON_COMMENT`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="@Ognl@isNotEmpty(id)">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="@Ognl@isNotEmpty(conKey)">
                #{conKey,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(conValue)">
                #{conValue,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(conComment)">
                #{conComment,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.athen.system.api.model.SystemConfigExample" resultType="java.lang.Integer">
        select count(*) from `system_config`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update `system_config`
        <set>
            <if test="@Ognl@isNotEmpty(record.id)">
                `ID` = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="@Ognl@isNotEmpty(record.conKey)">
                `CON_KEY` = #{record.conKey,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(record.conValue)">
                `CON_VALUE` = #{record.conValue,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(record.conComment)">
                `CON_COMMENT` = #{record.conComment,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.athen.system.api.model.SystemConfig">
        update `system_config`
        <set>
            <if test="@Ognl@isNotEmpty(conKey)">
                `CON_KEY` = #{conKey,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(conValue)">
                `CON_VALUE` = #{conValue,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(conComment)">
                `CON_COMMENT` = #{conComment,jdbcType=VARCHAR},
            </if>
        </set>
        where `ID` = #{id,jdbcType=BIGINT}
    </update>

    <select id="selectByKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from `system_config`
        where `CON_KEY` = #{conKey,jdbcType=BIGINT}
    </select>

</mapper>