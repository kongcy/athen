<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.athen.system.repository.SysUserMapper">
    <resultMap id="BaseResultMap" type="com.athen.system.api.model.SysUser">
        <id column="ID" jdbcType="BIGINT" property="id" />
        <result column="LOGIN_NAME" jdbcType="VARCHAR" property="loginName" />
        <result column="PASSWORD" jdbcType="VARCHAR" property="password" />
        <result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
        <result column="PHONE" jdbcType="VARCHAR" property="phone" />
        <result column="EMAIL" jdbcType="VARCHAR" property="email" />
        <result column="STATE" jdbcType="INTEGER" property="state" />
        <result column="LOGIN_IP" jdbcType="INTEGER" property="loginIp" />
        <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
        <result column="CREATE_ID" jdbcType="BIGINT" property="createId" />
    </resultMap>
    <resultMap id="BaseResultMap_Alias" type="com.athen.system.api.model.SysUser">
        <id column="SYS_USER_ID" jdbcType="BIGINT" property="id" />
        <result column="SYS_USER_LOGIN_NAME" jdbcType="VARCHAR" property="loginName" />
        <result column="SYS_USER_PASSWORD" jdbcType="VARCHAR" property="password" />
        <result column="SYS_USER_USER_NAME" jdbcType="VARCHAR" property="userName" />
        <result column="SYS_USER_PHONE" jdbcType="VARCHAR" property="phone" />
        <result column="SYS_USER_EMAIL" jdbcType="VARCHAR" property="email" />
        <result column="SYS_USER_STATE" jdbcType="INTEGER" property="state" />
        <result column="SYS_USER_LOGIN_IP" jdbcType="INTEGER" property="loginIp" />
        <result column="SYS_USER_CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
        <result column="SYS_USER_CREATE_ID" jdbcType="BIGINT" property="createId" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        `ID`, `LOGIN_NAME`, `PASSWORD`, `USER_NAME`, `PHONE`, `EMAIL`, 
        `STATE`, `LOGIN_IP`, `CREATE_TIME`, `CREATE_ID`
    </sql>
    <sql id="Base_Column_List_Alias">
        `sys_user`.`ID` as `SYS_USER_ID`, `sys_user`.`LOGIN_NAME` as `SYS_USER_LOGIN_NAME`, 
        `sys_user`.`PASSWORD` as `SYS_USER_PASSWORD`, `sys_user`.`USER_NAME` as `SYS_USER_USER_NAME`, 
        `sys_user`.`PHONE` as `SYS_USER_PHONE`, `sys_user`.`EMAIL` as `SYS_USER_EMAIL`, 
        `sys_user`.`STATE` as `SYS_USER_STATE`, `sys_user`.`LOGIN_IP` as `SYS_USER_LOGIN_IP`, 
        `sys_user`.`CREATE_TIME` as `SYS_USER_CREATE_TIME`, `sys_user`.`CREATE_ID` as `SYS_USER_CREATE_ID`
    </sql>
    <select id="selectByExample" parameterType="com.athen.system.api.model.SysUserExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List" />
        from `sys_user`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List" />
        from `sys_user`
        where `ID` = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from `sys_user`
        where `ID` = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.athen.system.api.model.SysUserExample">
        delete from `sys_user`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insertSelective" keyColumn="ID" keyProperty="id" parameterType="com.athen.system.api.model.SysUser" useGeneratedKeys="true">
        insert into `sys_user`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="@Ognl@isNotEmpty(id)">
                `ID`,
            </if>
            <if test="@Ognl@isNotEmpty(loginName)">
                `LOGIN_NAME`,
            </if>
            <if test="@Ognl@isNotEmpty(password)">
                `PASSWORD`,
            </if>
            <if test="@Ognl@isNotEmpty(userName)">
                `USER_NAME`,
            </if>
            <if test="@Ognl@isNotEmpty(phone)">
                `PHONE`,
            </if>
            <if test="@Ognl@isNotEmpty(email)">
                `EMAIL`,
            </if>
            <if test="@Ognl@isNotEmpty(state)">
                `STATE`,
            </if>
            <if test="@Ognl@isNotEmpty(loginIp)">
                `LOGIN_IP`,
            </if>
            <if test="@Ognl@isNotEmpty(createTime)">
                `CREATE_TIME`,
            </if>
            <if test="@Ognl@isNotEmpty(createId)">
                `CREATE_ID`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="@Ognl@isNotEmpty(id)">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="@Ognl@isNotEmpty(loginName)">
                #{loginName,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(password)">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(userName)">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(phone)">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(email)">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(state)">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="@Ognl@isNotEmpty(loginIp)">
                #{loginIp,jdbcType=INTEGER},
            </if>
            <if test="@Ognl@isNotEmpty(createTime)">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="@Ognl@isNotEmpty(createId)">
                #{createId,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.athen.system.api.model.SysUserExample" resultType="java.lang.Integer">
        select count(*) from `sys_user`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update `sys_user`
        <set>
            <if test="@Ognl@isNotEmpty(record.id)">
                `ID` = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="@Ognl@isNotEmpty(record.loginName)">
                `LOGIN_NAME` = #{record.loginName,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(record.password)">
                `PASSWORD` = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(record.userName)">
                `USER_NAME` = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(record.phone)">
                `PHONE` = #{record.phone,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(record.email)">
                `EMAIL` = #{record.email,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(record.state)">
                `STATE` = #{record.state,jdbcType=INTEGER},
            </if>
            <if test="@Ognl@isNotEmpty(record.loginIp)">
                `LOGIN_IP` = #{record.loginIp,jdbcType=INTEGER},
            </if>
            <if test="@Ognl@isNotEmpty(record.createTime)">
                `CREATE_TIME` = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="@Ognl@isNotEmpty(record.createId)">
                `CREATE_ID` = #{record.createId,jdbcType=BIGINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.athen.system.api.model.SysUser">
        update `sys_user`
        <set>
            <if test="@Ognl@isNotEmpty(loginName)">
                `LOGIN_NAME` = #{loginName,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(password)">
                `PASSWORD` = #{password,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(userName)">
                `USER_NAME` = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(phone)">
                `PHONE` = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(email)">
                `EMAIL` = #{email,jdbcType=VARCHAR},
            </if>
            <if test="@Ognl@isNotEmpty(state)">
                `STATE` = #{state,jdbcType=INTEGER},
            </if>
            <if test="@Ognl@isNotEmpty(loginIp)">
                `LOGIN_IP` = #{loginIp,jdbcType=INTEGER},
            </if>
            <if test="@Ognl@isNotEmpty(createTime)">
                `CREATE_TIME` = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="@Ognl@isNotEmpty(createId)">
                `CREATE_ID` = #{createId,jdbcType=BIGINT},
            </if>
        </set>
        where `ID` = #{id,jdbcType=BIGINT}
    </update>
</mapper>