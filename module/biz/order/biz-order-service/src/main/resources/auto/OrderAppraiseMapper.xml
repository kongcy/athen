<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.athen.order.repository.OrderAppraiseMapper">
    <resultMap id="BaseResultMap" type="com.athen.order.api.model.OrderAppraise">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="order_id" jdbcType="BIGINT" property="orderId" />
        <result column="member_id" jdbcType="BIGINT" property="memberId" />
        <result column="member_name" jdbcType="VARCHAR" property="memberName" />
        <result column="level" jdbcType="INTEGER" property="level" />
        <result column="desc_star" jdbcType="INTEGER" property="descStar" />
        <result column="logistics_star" jdbcType="INTEGER" property="logisticsStar" />
        <result column="attitude_star" jdbcType="INTEGER" property="attitudeStar" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.athen.order.api.model.OrderAppraiseWithBLOBs">
        <result column="url" jdbcType="LONGVARCHAR" property="url" />
        <result column="info" jdbcType="LONGVARCHAR" property="info" />
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        `id`, `order_id`, `member_id`, `member_name`, `level`, `desc_star`, `logistics_star`, 
        `attitude_star`, `create_time`, `update_time`
    </sql>
    <sql id="Blob_Column_List">
        `url`, `info`
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.athen.order.api.model.OrderAppraiseExample" resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from `order_appraise`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.athen.order.api.model.OrderAppraiseExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List" />
        from `order_appraise`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select 
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from `order_appraise`
        where `id` = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from `order_appraise`
        where `id` = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.athen.order.api.model.OrderAppraiseExample">
        delete from `order_appraise`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </delete>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.athen.order.api.model.OrderAppraiseWithBLOBs" useGeneratedKeys="true">
        insert into `order_appraise`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                `id`,
            </if>
            <if test="orderId != null">
                `order_id`,
            </if>
            <if test="memberId != null">
                `member_id`,
            </if>
            <if test="memberName != null">
                `member_name`,
            </if>
            <if test="level != null">
                `level`,
            </if>
            <if test="descStar != null">
                `desc_star`,
            </if>
            <if test="logisticsStar != null">
                `logistics_star`,
            </if>
            <if test="attitudeStar != null">
                `attitude_star`,
            </if>
            <if test="createTime != null">
                `create_time`,
            </if>
            <if test="updateTime != null">
                `update_time`,
            </if>
            <if test="url != null">
                `url`,
            </if>
            <if test="info != null">
                `info`,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=BIGINT},
            </if>
            <if test="memberId != null">
                #{memberId,jdbcType=BIGINT},
            </if>
            <if test="memberName != null">
                #{memberName,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                #{level,jdbcType=INTEGER},
            </if>
            <if test="descStar != null">
                #{descStar,jdbcType=INTEGER},
            </if>
            <if test="logisticsStar != null">
                #{logisticsStar,jdbcType=INTEGER},
            </if>
            <if test="attitudeStar != null">
                #{attitudeStar,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="url != null">
                #{url,jdbcType=LONGVARCHAR},
            </if>
            <if test="info != null">
                #{info,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.athen.order.api.model.OrderAppraiseExample" resultType="java.lang.Integer">
        select count(*) from `order_appraise`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update `order_appraise`
        <set>
            <if test="record.id != null">
                `id` = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.orderId != null">
                `order_id` = #{record.orderId,jdbcType=BIGINT},
            </if>
            <if test="record.memberId != null">
                `member_id` = #{record.memberId,jdbcType=BIGINT},
            </if>
            <if test="record.memberName != null">
                `member_name` = #{record.memberName,jdbcType=VARCHAR},
            </if>
            <if test="record.level != null">
                `level` = #{record.level,jdbcType=INTEGER},
            </if>
            <if test="record.descStar != null">
                `desc_star` = #{record.descStar,jdbcType=INTEGER},
            </if>
            <if test="record.logisticsStar != null">
                `logistics_star` = #{record.logisticsStar,jdbcType=INTEGER},
            </if>
            <if test="record.attitudeStar != null">
                `attitude_star` = #{record.attitudeStar,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null">
                `create_time` = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                `update_time` = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.url != null">
                `url` = #{record.url,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.info != null">
                `info` = #{record.info,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.athen.order.api.model.OrderAppraiseWithBLOBs">
        update `order_appraise`
        <set>
            <if test="orderId != null">
                `order_id` = #{orderId,jdbcType=BIGINT},
            </if>
            <if test="memberId != null">
                `member_id` = #{memberId,jdbcType=BIGINT},
            </if>
            <if test="memberName != null">
                `member_name` = #{memberName,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                `level` = #{level,jdbcType=INTEGER},
            </if>
            <if test="descStar != null">
                `desc_star` = #{descStar,jdbcType=INTEGER},
            </if>
            <if test="logisticsStar != null">
                `logistics_star` = #{logisticsStar,jdbcType=INTEGER},
            </if>
            <if test="attitudeStar != null">
                `attitude_star` = #{attitudeStar,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                `create_time` = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                `update_time` = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="url != null">
                `url` = #{url,jdbcType=LONGVARCHAR},
            </if>
            <if test="info != null">
                `info` = #{info,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where `id` = #{id,jdbcType=BIGINT}
    </update>
</mapper>